#  -*- mode: shell-script -*-

alias dr=docker_run
alias de=docker_exec
alias devs='de . bash -u vscode'
alias dend='de . bash -u node'
alias dps="docker ps --format 'table{{.Names}}\t{{.Status}}\t{{.Image}}\t{{.Command}}'"
alias dpsf="docker ps --no-trunc --format 'table{{.Names}}\t{{.Status}}\t{{.Image}}\t{{.Command}}'"
alias dpsp="docker ps --format 'table{{.Names}}\t{{.Ports}}'"

alias dc='docker compose'
function dls() {
    docker compose ls --format json "$@" |
        jq --raw-output '["NAME","STATUS"], ["--","------"], (.[] | [.Name, .Status]) | @tsv' |
        column -t
}

# TODO: add # docker_run -p 127.0.0.1:80:8080/tcp python:3.8
# This binds port 8080 of the container to TCP port 80 on 127.0.0.1 of the host machine.
function docker_run() {
    local dn args=()
    if [[ $# -lt 2 ]]; then
        echo 'usage: docker_run [opts] <image> <cmd> [<args>...]' >&2
        return 1
    fi
    if find_arg_value --name "$@"; then
        dn="${BASHTOOLS_VALUE}"
    else
        dn="${PWD##*/}"
        args+=(--name "${dn}")
    fi
    docker run -ti -v "${PWD}:/mnt/${name}" "${args[@]}" "$@"
}

function docker_exec() {
    if [[ $# -lt 1 ]]; then
        echo 'usage: docker_exec <name_match> [ <shell> <docker_exec_options...> ]' >&2
        return 1
    fi

    local name_match=$1
    shift

    local shell='bash'
    if [[ $# -gt 0 ]]; then
        shell=$1
        shift
    fi

    local matches
    IFS=$'\r\n' GLOBIGNORE='*' command eval 'matches=($(docker ps --no-trunc --format "{{.Names}} {{.Command}}" | grep "$name_match"))'
    local cnt=${#matches[@]}

    if [[ $cnt -eq 0 ]]; then
        IFS=$'\r\n' GLOBIGNORE='*' command eval 'matches=($(docker ps --no-trunc --format "{{.Names}} {{.Image}} {{.Command}}" | grep "$name_match"))'
        cnt=${#matches[@]}
        if [[ $cnt -eq 0 ]]; then
            echo 'Nothing matched' >&2
            return 2
        fi
    fi

    local match idx

    if [[ $cnt -gt 1 ]]; then
        PS3="Choose one: "
        select match in "${matches[@]}"; do
            if [[ -n "$match" ]]; then
                match=${match%% *} # first word in the item
                break
            fi

            echo 'Invalid option' >&2
        done
    else
        match=${matches[0]}
    fi

    if [[ -z "$match" ]]; then
        return 3
    fi

    local name=$(echo "$match" | awk '{ print $1 }')
    local cmd=(docker exec -ti "$@" $name $shell)
    echo -n '> '
    printf '%q ' "${cmd[@]}" >&2
    echo
    "${cmd[@]}"
}

# TODO: this removed all containers not running!! and fails on volume (doesn't understand "until" filter)
# function docker_clean() {
#     if [[ $# -ne 1 ]]; then
#         echo 'usage: docker_clean <older_than_months>' >&2
#         return 1
#     fi

#     local filter="--filter until=${1}m"
#     echo "Pruning resources (${filter}):"
#     echo '* Containers...'
#     docker container prune $filter
#     echo '* Images...'
#     docker image prune -a $filter
#     echo '* Volumes...'
#     docker volume prune $filter
#     echo '* Networks...'
#     docker network prune $filter
# }

# function docker_clean() {
#     local running
#     running=$(docker ps -a | awk 'NR>1{print $1}')
#     if [[ -n "$running" ]]; then
#         echo "kill/rm: $running"
#         docker kill $running
#         docker rm $running
#     fi
#     local imgs
#     imgs=$(docker images -f dangling=true -q)
#     if [[ -n "$imgs" ]]; then
#         echo "rm: $imgs"
#         docker rmi $imgs
#     fi
# }

function letsencrypt() {
    docker run -it --rm --name certbot \
        -v '/etc/letsencrypt:/etc/letsencrypt' \
        -v '/var/lib/letsencrypt:/var/lib/letsencrypt' \
        certbot/certbot \
        "$@"
}

function letsencrypt_wildcard() {
    if [[ $# -ne 1 ]]; then
        echo 'usage letsencrypt_wildcard <domain>' >&2
        return 1
    fi
    letsencrypt certonly --manual --preferred-challenges dns -d "*.$1"
}

function go_dock() {
    docker_run --rm golang bash -c "cd /mnt && go $@"
}
