#!/usr/bin/env python

# TODO: add ability to look for certain response codes (and show associated requests)
#       e.g. dump requests that result in 500

# TODO: add ability to run background sshdump (remote tcpdump over ssh) for input

# TODO: add occasional summary write (i.e. show number of codes found even if not shown)

# TODO: add "tee" to write out to a file while parsing (so you can re-run queries later)


import json
import binascii
import click
import pyshark

from tqdm import tqdm
from datetime import datetime

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

@click.command(context_settings=CONTEXT_SETTINGS)
@click.option('-i', '--interface')
@click.option('-r', '--read', 'infile', type=click.Path(exists=True, dir_okay=False))
@click.option('-o', '--only-matched', is_flag=True)
@click.argument('display_filter', nargs=-1)
def main(interface, infile, only_matched, display_filter):
    display_filter = ' '.join(display_filter) if display_filter else 'http.request || http.response'
    # FIXME: show usage on failure (use click.fail?)
    if interface and infile:
        raise ValueError('Specify only interface OR infile, not both')
    if not interface and not infile:
        raise ValueError('Specify an interface OR infile')
    params = {
        'display_filter': display_filter,
    }
    with tqdm(unit=' pkts') as progress:
        with tqdm(unit=' HTTP') as http_progress:
            if infile:
                safe_write('Reading from', infile, 'for', display_filter)
                for packet in pyshark.FileCapture(infile, **params):
                    process(progress, http_progress, packet, only_matched)
            else:
                params['capture_filter'] = 'tcp[tcpflags] & tcp-push != 0'
                safe_write('Listening on', interface, 'for', display_filter)
                for packet in pyshark.LiveCapture(interface, **params).sniff_continuously():
                    process(progress, http_progress, packet, only_matched)

def process(progress, http_progress, packet, only_matched):
    progress.update()
    if not hasattr(packet, 'http'):
        # safe_write('>>> IGNORING:', packet)
        return
    http_progress.update()
    data = None
    timestamp = str(datetime.fromtimestamp(float(packet.sniff_timestamp)))
    http = packet.http
    is_req = fetch(http, 'request')
    ctype = fetch(http, 'content_type', 'UNKNOWN')
    clen = fetch(http, 'content_length', '0')
    if hasattr(http, 'x_forwarded_for'):
        from_addr = [e.strip() for e in http.x_forwarded_for.split(',')][-1]
    else:
        from_addr = ''
    if hasattr(packet, 'json'):
        data = json_from(http.file_data)
    elif hasattr(packet, 'mime_multipart'):
        data = json_from(binascii.unhexlify(packet.mime_multipart.data))
    elif int(clen) > 0:
        if ctype.startswith('text/plain'):
            try:
                data = json_from(http.file_data)
            except ValueError:
                pass
    if int(clen) > 0 and not data:
        data = 'skipping %s bytes of %s' % (clen, ctype)
    if is_req:
        register(
            packet, '>>> %s %s\n%s %s\n%s' % (
                timestamp, from_addr, http.request_method, http.request_full_uri, data or '')
        )
    else:
        req = find_request(packet)
        if req:
            safe_write(req)
            dir = '<<<'
        elif only_matched:
            return
        else:
            dir = '???'
        safe_write(dir, timestamp, from_addr)
        safe_write(http.response_code, http.response_phrase)
        if data and len(data) > 0:
            safe_write(data)

outstanding = {}

def register(packet, req):
    global outstanding
    key = ':'.join([packet.ip.src, packet.tcp.srcport, packet.ip.dst, packet.tcp.dstport])
    outstanding[key] = req

def find_request(packet):
    key = ':'.join([packet.ip.dst, packet.tcp.dstport, packet.ip.src, packet.tcp.srcport])
    req = outstanding.get(key)
    if req:
        del(outstanding[key])
    return req

def fetch(obj, attr, default=None):
    return getattr(obj, attr) if hasattr(obj, attr) else default

def json_from(data):
    try:
        obj = json.loads(data)
    except ValueError:
        return None
    return json.dumps(obj, sort_keys=False, indent=4, separators=(',', ': '))

def safe_write(*args):
    tqdm.write(' '.join([str(a) for a in args]))

if __name__ == '__main__':
    main()
