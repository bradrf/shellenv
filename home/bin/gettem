#!/usr/bin/env python

import argparse, ConfigParser, os, sys, traceback, time, boto.ec2, paramiko
from colorama import Fore, Style

class SshHelper:

    READLEN = 16384

    def __init__(self, config_host, verbose=True):
        self.verbose = verbose
        self.connected_host = None
        self.client = paramiko.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        config_fn = os.path.join(os.path.expanduser('~'), '.ssh', 'config')
        config = paramiko.SSHConfig()
        if os.path.exists(config_fn):
            config.parse(open(config_fn))
            self.opts = config.lookup(config_host)
        else:
            self.opts = {
                'user': None,
                'identity': None
            }

    def connect(self, host):
        if self.connected_host == None:
            if self.connected_host != None and host != self.connected_host:
                raise Exception('Already connected: '+self.connected_host)
            self.client.connect(host,
                                username=self.opts['user'],
                                key_filename=self.opts['identityfile'])
            self.connected_host = host

    def run(self, cmd, stdin_body=None):
        if self.verbose: print cmd
        session = self.client.get_transport().open_session()
        session.exec_command(cmd)
        while True:
            if stdin_body != None and session.send_ready():
                session.send(stdin_body)
                session.close()
                stdin_body = None
            if session.recv_ready():
                self._show_lines(session.recv(self.READLEN))
            if session.recv_stderr_ready():
                sys.stdout.write(Fore.RED + Style.BRIGHT)
                self._show_lines(session.recv_stderr(self.READLEN))
                sys.stdout.write(Style.RESET_ALL)
            if session.exit_status_ready():
                break
        rc = session.recv_exit_status()
        session.close()
        return rc

    def _show_lines(self, string):
        for line in string.splitlines(True):
            if len(line) > 0: sys.stdout.write(line)

    def capture(self, cmd):
        if self.verbose: print cmd
        stdin, stdout, stderr = self.client.exec_command(cmd)
        return stdout.read().splitlines()

    def download(self, remote_files, local_directory):
        if not os.path.exists(local_directory):
            os.makedirs(local_directory)
        sftp = paramiko.SFTPClient.from_transport(self.client.get_transport())
        for remote_fn in remote_files:
            if not sftp.stat(remote_fn):
                raise Exception('Remote file does not exist: ' + remote_fn)
            bn = os.path.basename(remote_fn)
            local_fn = os.path.join(local_directory, bn)
            print remote_fn + ' -> ' + local_fn
            if os.path.exists(local_fn):
                raise Exception('Local file exists: ' + local_fn)
            self.start_time = time.time()
            self.last_report = int(self.start_time)
            sftp.get(remote_fn, local_fn, self._show_progress)
            print
        sftp.close()

    def _show_progress(self, tx, total):
        try:
            now_raw = time.time()
            now = int(now_raw)
            if now == self.last_report: return
            self.last_report = now
            Mbps = ((tx * 8) / (now_raw - self.start_time)) / 1000000
            progress_raw = (float(tx) / total) * 100
            progress = int(progress_raw)
            filler = '#'*progress + ' '*(100-progress)
            sys.stdout.write('\r  %3.0f%% [%s] %s / %s @ %5.1f Mbps' %
                             (progress_raw, filler, self._humanize_bytes(tx), self._humanize_bytes(total), Mbps))
            sys.stdout.flush()
        except:
            print 'Error:', sys.exc_info(), traceback.format_exc()
            raise

    def _humanize_bytes(self, count):
        if (count >= 1073741824):
            return '%5.1f GB' % (count / 1073741824)
        elif (count >= 1048576):
            return '%5.1f MB' % (count / 1048576)
        else:
            return '%5.1f KB' % (count / 1024)

    def scp(self, remote_directory, local_directory):
        if not os.path.exists(local_directory):
            os.makedirs(local_directory)
        cmd = """scp -o 'BatchMode yes' -i '%s' -r '%s@%s:%s' '%s'""" % \
              (self.opts['identityfile'][0],
               self.opts['user'],
               self.connected_host,
               remote_directory,
               local_directory)
        if self.verbose: print cmd
        os.system(cmd)

    def close(self):
        self.client.close();

#s = SshHelper('jenkins')
#s.connect('jenkins.cloud.unity3d.com')
#s.download(['/tmp/big'], 'jenkins-download')
##s.scp(['/tmp/big'], 'jenkins-download')
#s.close()
#exit(0)

###############################################################################################

basename = os.path.basename(__file__)

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--profile', default='default')
parser.add_argument('-c', '--ssh-config', default='gettem')
parser.add_argument('-d', '--directory', default='gettem-downloads')
parser.add_argument('command', choices=['status', 'start', 'init', 'download', 'stop'])

args = parser.parse_args()
if args.profile != 'default':
    args.profile = 'profile ' + args.profile

aws_config = ConfigParser.SafeConfigParser()
aws_config.read(os.environ['AWS_CONFIG_FILE'])
items = aws_config._sections[args.profile]

# delete unnecessary keys from this section
del items['__name__']
del items['output']

region = items['region']
del items['region']

ssh = SshHelper(args.ssh_config)

conn = boto.ec2.connect_to_region(region, **items)

reservations = conn.get_all_instances()

g_instance = None
stopped_instances = []

for reservation in reservations:
    for instance in reservation.instances:
        name = instance.tags.get('Name','')
        if name.startswith(basename):
            if instance.state == 'running':
                g_instance = instance
            else:
                stopped_instances.append(instance)

if args.command == 'status':
    if g_instance:
        print 'The instance:', g_instance.id, g_instance.ip_address, g_instance.state
        print
        print 'ssh -i ~/.ssh/id_aws_gw ubuntu@' + g_instance.ip_address
        print
    elif len(stopped_instances) > 0:
        print 'Stopped instances: ' + ' '.join(i.id for i in stopped_instances)
    else:
        print 'No instances running'

elif args.command == 'start':
    if g_instance and g_instance.state == 'running':
        print 'An instance is already running:', instance.id, instance.ip_address
        exit(1)
    dev_sda1 = boto.ec2.blockdevicemapping.EBSBlockDeviceType()
    dev_sda1.size = 50 # size in Gigabytes
    dev_sda1.delete_on_termination = True
    bdm = boto.ec2.blockdevicemapping.BlockDeviceMapping()
    bdm['/dev/sda1'] = dev_sda1
    reservation = conn.run_instances('ami-c30360aa', key_name='default', instance_type='t1.micro', block_device_map=bdm)
    instance = reservation.instances[0]
    status = instance.update()
    while status == 'pending':
        print 'pending...'
        time.sleep(10)
        status = instance.update()
    if status == 'running':
        instance.add_tag('Name', basename)
    else:
        print('Instance status: ' + status)
        exit(2)
    print 'The instance:', instance.id, instance.ip_address

elif args.command == 'init':
    ssh.connect(g_instance.ip_address)
    ssh.run("""sudo DEBIAN_FRONTEND=noninteractive aptitude -y update && \\
    sudo DEBIAN_FRONTEND=noninteractive aptitude -y install rtorrent""")
    ssh.run(
"""! which rtorrent && \\
    wget -nv http://www.club.cc.cmu.edu/pub/ubuntu//pool/universe/r/rtorrent/rtorrent_0.9.2-1_amd64.deb && \\
    wget -nv http://www.club.cc.cmu.edu/pub/ubuntu//pool/universe/libt/libtorrent/libtorrent14_0.13.2-1_amd64.deb && \\
    wget -nv http://www.club.cc.cmu.edu/pub/ubuntu//pool/main/x/xmlrpc-c/libxmlrpc-core-c3_1.16.33-3.2ubuntu1_amd64.deb && \\
    sudo DEBIAN_FRONTEND=noninteractive dpkg -i *.deb && rm *.deb""")
    ssh.run(
        'cat - >> ~/.bashrc',
"""
function gettor()
{
    local t=$(cat "${HOME}/.tornum" 2>/dev/null || echo 1)
    local n="${HOME}/${t}.torrent"
    wget -O- "$1" | gunzip -c > $n && echo "$n" && echo && ((t++)) && echo $t > "${HOME}/.tornum"
}
""")
    print
    print 'ssh -o "StrictHostKeyChecking no" -i ~/.ssh/id_aws_gw -D1080 -t ubuntu@' + g_instance.ip_address + ' screen -h 10000'
    print

elif args.command == 'download-sftp':
    # this is really really slow! three-times worse than scp
    if g_instance:
        ssh.connect(g_instance.ip_address)
        remote_files = ssh.capture(
            """find ~ -type f \( -iname '*.avi' -o -iname '*.mp4' -o -iname '*.mkv' -o -iname '*.m4v' \)""")
        if len(remote_files) > 0:
            print 'Found ' + str(len(remote_files)) + ' video files to download.'
            ssh.download(remote_files, args.directory)
    else:
        print 'No instances running'

elif args.command == 'download':
    if g_instance:
        ssh.connect(g_instance.ip_address)
        ssh.run('mkdir ' + basename)
        ssh.run("""find . -type f -not -iname '*sample*' \( -iname '*.avi' -o -iname '*.mp4' -o -iname '*.mkv' -o -iname '*.m4v' \) -exec mv -v \{\} """ +
                basename + ' \;')
        ssh.scp(basename, args.directory)
    else:
        print 'No instances running'

elif args.command == 'stop':
    if not g_instance:
        print 'No instance running'
        exit(3)
    ssh.connect(g_instance.ip_address)
    ssh.run('rm -rvf * .*')
    conn.terminate_instances(instance_ids=[g_instance.id])
    print 'The instance is terminating:', g_instance.id, g_instance.ip_address
