#!/usr/bin/env ruby

require 'pathname'
require 'bytes'

# optional to make path names unique
begin require 'literate_randomizer'; rescue LoadError; end

if ARGV.size != 4
  bin, bm = Bytes::BINARY
  dec, dm = Bytes::DECIMAL
  $stderr.puts <<EOF

usage: #{File.basename $0, '.rb'} <minimum_size> <maximum_size> <count> <depth>

     The size MAY end with a unit label:
       * BINARY labels (#{bm} multiplier):  #{bin.join(', ')}
       * DECIMAL labels (#{dm} multiplier): #{dec.join(', ')}

     The count will determine the number of files to generate.

     The depth will determine the hierarchy of the files. The number of files will be randomly
     distributed among the tree.

EOF
  exit 1
end

min,max,count,depth = ARGV

min   = Bytes.dehumanize(min)
max   = Bytes.dehumanize(max)
count = count.to_i
depth = depth.to_i

if defined? LiterateRandomizer
  def gen_name
    LiterateRandomizer.word
  end
else
  def gen_name
    "gen#{Random.rand(0xffffffff)}"
  end
end

paths = {}

count.times do |i|
  d = Random.rand(depth)
  if d < 1
    pn = Pathname.new('.')
  else
    pn = nil
    pns = paths[d] and pn = pns[Random.rand(pns.size)]
    unless pn
      pn = Pathname.new(gen_name)
      d.times{ pn += gen_name }
      pn.mkpath
      (paths[d] ||= []) << pn
    end
  end
  fn = pn + gen_name
  fn.open('wb') do |file|
    len = Random.rand(min..max).round
    gen = Random.new
    puts "#{Bytes.humanize(len, precision: 6.1)} => #{fn}"
    while len > 0
      len -= file.write(gen.bytes(len < 32768 ? len : 32768))
    end
  end
end
