#!/usr/bin/env python

from sys import stderr
from time import sleep
from os import _exit
from argparse import ArgumentParser
import signal
import simple_aws

parser = ArgumentParser()
parser.add_argument('-i', '--interval', type=int, default=5)
parser.add_argument('status')
parser.add_argument('id_or_ip_or_name', nargs='+')
args = parser.parse_args()

def sighandler(signal, frame): _exit(3)
signal.signal(signal.SIGINT, sighandler)

wait_for_status = 'Status:' + args.status
selector = simple_aws.selector_for(args.id_or_ip_or_name)

regions = {}
instance_map = {}

for instance in simple_aws.get_instances(selector):
    regions.setdefault(instance.region, []).append(instance)
    instance_map[instance.id] = instance

if len(regions) < 1:
    stderr.write('No instances found\n')
    exit(2)

while len(instance_map) > 0:
    for region, instances in regions.iteritems():
        ids = [i.id for i in instances if i.id in instance_map.keys()]
        for stat in simple_aws.get_connection(region).get_all_instance_status(instance_ids=ids):
            i = instance_map[stat.id]
            print stat.id, i.name, stat.instance_status
            if str(stat.instance_status) == wait_for_status:
                del(instance_map[stat.id])
    if len(instance_map) > 0:
        sleep(args.interval)
