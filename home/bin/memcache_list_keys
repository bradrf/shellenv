#!/usr/bin/env ruby

require 'optparse'
require 'io/console'
require 'socket'
require 'dalli'

host = 'localhost'
port = 11211
max_rows = 100
key_regexp = //
inverse = false
get_values = false
delete_values = false
verbose = false

cols = `tput cols 2>/dev/null`
value_trunc_max = $?.success? ? cols.to_i - 1: 100

parser = OptionParser.new do |opts|
  opts.on('-v','--verbose','show more details'){|v| verbose = v}
  opts.on('-g','--get','get values'){|v| get_values = v}
  opts.on('-t','--trunc MAX','truncate values to show only MAX chars (zero indicates show all)'){|v|
    v = v.to_i
    value_trunc_max = v > 0 ? v + 1 : -1
  }
  opts.on('-d','--delete','delete values'){|v| delete_values = v}
  opts.on('-h','--host HOST','memcached host'){|v| host = v}
  opts.on('-p','--port PORT','memcached port'){|v| port = v.to_i}
  opts.on('-r','--rows MAX','maximum number of keys per slab to dump'){|v| max_rows = v.to_i}
  opts.on('-m','--match REGEXP','select keys matching REGEXP (start with bang to invert)'){|v|
    if v[0] == ?!
      v = v[1..-1]
      inverse = true
    end
    key_regexp = Regexp.new(v)
  }
end

parser.parse!

if delete_values && key_regexp == //
  puts
  $stderr.print 'DELETE ALL RECORDS?! '
  if $stdin.getch != ?y
    puts
    exit 2
  end
  puts
end

def get(sock, cmd)
  sock.write("#{cmd}\r\n")
  while line = sock.gets
    line.chop! # docs claim \r\n are removed in single call...
    line == 'END' and break
    if line == 'ERROR'
      $stderr.puts line
      exit 2
    end
    yield line
  end
end

keys = {}
TCPSocket.open(host, port) do |sock|
  slabs = []

  get(sock, 'stats items') do |stat|
    verbose and puts ">>> #{stat}"
    if stat =~ /items:(\d+):number (\d+)/
      slab = $1.to_i
      number = $2.to_i
      if number > 0
        slabs << slab
        number > max_rows and
          $stderr.puts "WARN: slab #{slab} has #{number} items but max is set to #{max_rows}"
      end
    end
  end

  slabs.each do |slab|
    get(sock, "stats cachedump #{slab} #{max_rows}") do |item|
      words = item.split
      if words[0] == 'ITEM'
        key = words[1]
        size = words[2][1..-1].to_i
        m = key_regexp.match(key)
        inverse and m = !m
        if m
          diff = words[4].to_i - Time.now.to_i
          keys[key] = {
            slab: slab,
            item: item,
            size: size,
            expiry: diff > 0 ? "expires in #{diff}s" : 'expired',
          }
        end
      end
    end
  end
end

client = Dalli::Client.new("#{host}:#{port}")
keys.each do |key, data|
  if verbose
    puts data
  else
    puts "#{key} #{data[:size]} #{data[:expiry]}"
  end
  if get_values
    if value = client.get(key)
      puts value[0..value_trunc_max]
    end
  end
  if delete_values
    client.delete(key)
    puts 'DELETED'
  end
end
client.close
