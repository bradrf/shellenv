#!/usr/bin/env python

from pwd import getpwuid
from os import getuid
from sys import argv, stdout, stderr
from boto.exception import EC2ResponseError
import simple_aws

prog_name = argv.pop(0)
if len(argv) < 1:
    stderr.write('usage: %s <id_or_ip_or_name> [...]\n' % prog_name)
    exit(1)

selector = simple_aws.selector_for(argv)
username = getpwuid(getuid())[0]
if not username:
    stderr.write('Unknown username\n')
    exit(4)

regions = {}

for instance in simple_aws.get_instances(selector):
    if instance.state == 'running':
        regions.setdefault(instance.region, []).append(instance)

if len(regions) < 1:
    stderr.write('No instances found\n')
    exit(2)

print 'Found:'
for region, instances in regions.iteritems():
    print '  ' + region + ':'
    for instance in instances:
        creator = instance.tags.get('creator')
        if creator == username:
            print '    ' + str(instance)
        else:
            print '!!! ' + str(instance)
            print '!!! CREATOR is not', username

stdout.write('\nTerminate? (y/[n])  ')
if raw_input().lower() != 'y':
    exit(3)

for region, instances in regions.iteritems():
    conn = simple_aws.get_connection(region)
    ids = [i.id for i in instances if i.state != 'terminated']
    if len(ids) > 0:
        print 'Terminating:', ids
        print conn.terminate_instances(instance_ids=ids)

for region, instances in regions.iteritems():
    conn = simple_aws.get_connection(region)
    for instance in instances:
        instance.wait_for('terminated')
        for volume in instance.volumes:
            if not volume.delete_on_termination:
                try:
                    volume.wait_for('available')
                    print 'Deleting:', volume, conn.delete_volume(volume.id)
                except EC2ResponseError as ex:
                    print 'Skipping:', volume, ex.error_code, ex.message
