#!/usr/bin/env python

from sys import argv, stdout, stderr
import simple_aws

if len(argv) < 2:
    stderr.write('usage: ec2_terminate <id_or_ip_or_name> [...]\n')
    exit(1)

regions = {}

for instance in simple_aws.get_instances():
    for arg in argv:
        if arg in [instance.id, instance.name,
                   instance.public, instance.public_ip,
                   instance.private, instance.private_ip]:
            regions.setdefault(instance.region, []).append(instance)

if len(regions) < 1:
    stderr.write('No matching instances found\n')
    exit(2)

print 'Found:'
for region, instances in regions.iteritems():
    print '  ' + region + ':'
    for instance in instances: print '    ' + str(instance)

stdout.write('\nTerminate? (y/[n])  ')
if raw_input().lower() != 'y': exit(3)

for region, instances in regions.iteritems():
    conn = simple_aws.get_connection(region)
    ids = [i.id for i in instances if i.state != 'terminated']
    if len(ids) > 0:
        print 'Terminating:', ids
        print conn.terminate_instances(instance_ids=ids)

for region, instances in regions.iteritems():
    conn = simple_aws.get_connection(region)
    for instance in instances:
        instance.wait_for('terminated')
        for volume in instance.volumes:
            if not volume.delete_on_termination:
                volume.wait_for('available')
                print 'Deleting:', volume
                print dir(volume.boto)
                print conn.delete_volume(volume.id)
