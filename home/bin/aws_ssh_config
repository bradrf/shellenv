#!/usr/bin/env python

import os
import re
from hashlib import sha256
import argparse
import simple_aws

# TODO:
# * add helpers to read ssh config and provide meta data on arguments to match (i.e. to lookup entries)

parser = argparse.ArgumentParser()
parser.add_argument('-z', '--zone', help='DNS Zone Name')
args = parser.parse_args()

# get a safe name for these hosts according to the access id in use
# (so multiple sets can be maintained in the same file for different access keys)
access_id = simple_aws.get_access_key_id()
name = sha256(access_id).hexdigest()[0:8]

profile = os.getenv('AWS_PROFILE','default').upper()
begin_marker = '### %s AWS HOSTS BEGIN (%s) ###' % (profile, name)
zone_marker = '### AWS ZONE: '
end_marker = '### %s AWS HOSTS END (%s) ###' % (profile, name)

ssh_config_fn = os.path.join(os.path.expanduser('~'),'.ssh','config')
confdir = os.path.dirname(ssh_config_fn)
if not os.path.exists(confdir):
    os.makedirs(confdir)

before_lines = []
after_lines = []
if os.path.exists(ssh_config_fn):
    conf = open(ssh_config_fn, 'r')
    state = 0
    for line in conf:
        if state == 0:
            if line.strip() == begin_marker:
                print 'found', begin_marker
                state = 1
            else:
                before_lines.append(line)
            continue
        elif state == 1:
            stripped = line.strip()
            if stripped == end_marker:
                state = 2
            elif args.zone == None:
                m = re.match('^'+zone_marker+'(.*)', stripped)
                if m:
                    args.zone = m.group(1)
            continue
        after_lines.append(line)
    conf.close()
    if state == 1:
        print 'Never located end marker: ' + end_marker
        exit(1)

if args.zone:
    dns_records = []
    simple_aws.get_zone_dns_records(args.zone, dns_records)
    print '%s: %s records' % (args.zone, len(dns_records))
else:
    dns_records = []

# get instances _before_ we stomp on the config
instances = sorted(simple_aws.get_instances(), key=lambda i: i.name.lower())
print 'sorted: %s instances' % len(instances)

print 'writing:', ssh_config_fn
conf = open(ssh_config_fn, 'w')
for line in before_lines:
    conf.write(line)

count = 0
conf.write(begin_marker + '\n')
if args.zone:
    conf.write(zone_marker + args.zone + '\n')

for instance in instances:
    if instance.platform or instance.state == 'terminated' or not instance.private:
        # not linux, probably won't support ssh, or dead, or nothing to ssh to
        continue
    name = instance.name.lower()
    conf.write('''\n# id=%s region=%s %s\nHost        %s.private\nHostname    %s\n''' %
               (instance.id, instance.region, instance.tags_str, name, instance.private))
    if instance.public:
        conf.write('''Host        %s\nHostname    %s\n''' % (name, instance.public))
        for dns_name in simple_aws.get_dns_names(instance.public, dns_records):
            conf.write('''Host        %s\nHostname    %s\n''' % (dns_name, instance.public))
    count += 1

conf.write('\n' + end_marker + '\n')
for line in after_lines:
    conf.write(line)

conf.close()
print 'updated: %s host entries' % count
